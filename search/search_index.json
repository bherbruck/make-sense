{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"makesense.ai makesense.ai is a free to use online tool for labelling photos. Thanks to the use of a browser it does not require any complicated installation - just visit the website and you are ready to go. It also doesn't matter which operating system you're running on - we do our best to be truly cross-platform. It is perfect for small computer vision deeplearning projects, making the process of preparing a dataset much easier and faster. Prepared labels can be downloaded in one of multiple supported formats. The application was written in TypeScript and is based on React/Redux duo. Advanced AI functionalities makesense.ai strives to significantly reduce the time we have to spend on labeling photos. To achieve this, we are going to use many different AI models that will be able to give you recommendations as well as automate repetitive and tedious activities. YOLOv5 is our most powerful integration yet. Thanks to the use of yolov5js you can load not only pretreated models from yolov5js-zoo , but above all your own models trained thanks to YOLOv5 and exported to tfjs format. SSD model pretrained on the COCO dataset , which will do some work for you in drawing bboxes on photos and also (in some cases) suggest a label. PoseNet model is a vision model that can be used to estimate the pose of a person in an image or video by estimating where key body joints are. In the future, we also plan to add, among other things, models that classify photos, detect characteristic features of faces as well as whole faces. The engine that drives our AI functionalities is TensorFlow.js - JS version of the most popular framework for training neural networks. This choice allows us not only to speed up your work but also to care about the privacy of your data, because unlike with other commercial and open source tools, your photos do not have to be transferred to the server. This time AI comes to your device! We need help Our documentation is still under construction. \ud83d\udea7 Let us know what topics we should cover first.","title":"Home"},{"location":"#advanced-ai-functionalities","text":"makesense.ai strives to significantly reduce the time we have to spend on labeling photos. To achieve this, we are going to use many different AI models that will be able to give you recommendations as well as automate repetitive and tedious activities. YOLOv5 is our most powerful integration yet. Thanks to the use of yolov5js you can load not only pretreated models from yolov5js-zoo , but above all your own models trained thanks to YOLOv5 and exported to tfjs format. SSD model pretrained on the COCO dataset , which will do some work for you in drawing bboxes on photos and also (in some cases) suggest a label. PoseNet model is a vision model that can be used to estimate the pose of a person in an image or video by estimating where key body joints are. In the future, we also plan to add, among other things, models that classify photos, detect characteristic features of faces as well as whole faces. The engine that drives our AI functionalities is TensorFlow.js - JS version of the most popular framework for training neural networks. This choice allows us not only to speed up your work but also to care about the privacy of your data, because unlike with other commercial and open source tools, your photos do not have to be transferred to the server. This time AI comes to your device!","title":"Advanced AI functionalities"},{"location":"#we-need-help","text":"Our documentation is still under construction. \ud83d\udea7 Let us know what topics we should cover first.","title":"We need help"},{"location":"changelog/","text":"1.10.0-alpha _ September 9, 2022 Added #156 : Support for YOLOv5 models. Fixed #272 : UI bug allowing to interact with hidden labels. 1.9.0-alpha _ July 26, 2022 Added #255 : Turning annotation visibility on and off. Added #252 : Box annotation .csv export file headers. Added #262 : Code linter configuration. Modified #262 : Migrate to the latest version of React and Material UI. Migrate from Webpack to Vite. Fixed #210 : Docker installation problems. Fixed #214 : PASCAL XML export to work with TFLite Model Maker.","title":"Changelog"},{"location":"changelog/#1.10.0-alpha","text":"Added #156 : Support for YOLOv5 models. Fixed #272 : UI bug allowing to interact with hidden labels.","title":"1.10.0-alpha _ September 9, 2022"},{"location":"changelog/#1.9.0-alpha","text":"Added #255 : Turning annotation visibility on and off. Added #252 : Box annotation .csv export file headers. Added #262 : Code linter configuration. Modified #262 : Migrate to the latest version of React and Material UI. Migrate from Webpack to Vite. Fixed #210 : Docker installation problems. Fixed #214 : PASCAL XML export to work with TFLite Model Maker.","title":"1.9.0-alpha _ July 26, 2022"},{"location":"export/","text":"Supported export Formats CSV YOLO VOC XML VGG JSON COCO JSON PIXEL MASK Point \u2713 \u2717 \u2610 \u2610 \u2610 \u2717 Line \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 Rect \u2713 \u2713 \u2713 \u2610 \u2610 \u2717 Polygon \u2610 \u2717 \u2610 \u2713 \u2713 \u2610 Label \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 Table 1. The matrix of supported labels export formats, where: \u2713 - supported format \u2610 - not yet supported format \u2717 - format does not make sense for a given label type","title":"Export"},{"location":"export/#supported-export-formats","text":"CSV YOLO VOC XML VGG JSON COCO JSON PIXEL MASK Point \u2713 \u2717 \u2610 \u2610 \u2610 \u2717 Line \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 Rect \u2713 \u2713 \u2713 \u2610 \u2610 \u2717 Polygon \u2610 \u2717 \u2610 \u2713 \u2713 \u2610 Label \u2713 \u2717 \u2717 \u2717 \u2717 \u2717 Table 1. The matrix of supported labels export formats, where: \u2713 - supported format \u2610 - not yet supported format \u2717 - format does not make sense for a given label type","title":"Supported export Formats"},{"location":"import/","text":"Supported import Formats CSV YOLO VOC XML VGG JSON COCO JSON PIXEL MASK Point \u2610 \u2717 \u2610 \u2610 \u2610 \u2717 Line \u2610 \u2717 \u2717 \u2717 \u2717 \u2717 Rect \u2610 \u2713 \u2610 \u2610 \u2713 \u2717 Polygon \u2610 \u2717 \u2610 \u2610 \u2713 \u2610 Label \u2610 \u2717 \u2717 \u2717 \u2717 \u2717 Table 1. The matrix of supported labels import formats, where: \u2713 - supported format \u2610 - not yet supported format \u2717 - format does not make sense for a given label type YOLO Load images. For the sake of the example, let us assume that the images have the following names: image-001.png , image-002.png and image-003.png . Load annotations. In YOLO format, each image should have an associated annotations file. The name of the annotation file must be the same as the image name, except that the annotation file must have .txt extension. So in ou example, we would have the following annotations files: image-001.txt , image-002.txt and image-003.txt . In addition, we need to provide one more file - labels.txt . This file contains object class names separated by newline characters. Here's an example for COCO dataset.","title":"Import"},{"location":"import/#supported-import-formats","text":"CSV YOLO VOC XML VGG JSON COCO JSON PIXEL MASK Point \u2610 \u2717 \u2610 \u2610 \u2610 \u2717 Line \u2610 \u2717 \u2717 \u2717 \u2717 \u2717 Rect \u2610 \u2713 \u2610 \u2610 \u2713 \u2717 Polygon \u2610 \u2717 \u2610 \u2610 \u2713 \u2610 Label \u2610 \u2717 \u2717 \u2717 \u2717 \u2717 Table 1. The matrix of supported labels import formats, where: \u2713 - supported format \u2610 - not yet supported format \u2717 - format does not make sense for a given label type","title":"Supported import Formats"},{"location":"import/#yolo","text":"Load images. For the sake of the example, let us assume that the images have the following names: image-001.png , image-002.png and image-003.png . Load annotations. In YOLO format, each image should have an associated annotations file. The name of the annotation file must be the same as the image name, except that the annotation file must have .txt extension. So in ou example, we would have the following annotations files: image-001.txt , image-002.txt and image-003.txt . In addition, we need to provide one more file - labels.txt . This file contains object class names separated by newline characters. Here's an example for COCO dataset.","title":"YOLO"},{"location":"local-setup/","text":"Set Up the Project Locally # clone repository git clone https://github.com/SkalskiP/make-sense.git # navigate to main dir cd make-sense # install dependencies npm install # serve with hot reload at localhost:3000 npm start To ensure proper functionality of the application locally, npm 6.x.x and node.js v11.x.x versions are required. More information about this problem is available in the #16 .","title":"Local setup"},{"location":"local-setup/#set-up-the-project-locally","text":"# clone repository git clone https://github.com/SkalskiP/make-sense.git # navigate to main dir cd make-sense # install dependencies npm install # serve with hot reload at localhost:3000 npm start To ensure proper functionality of the application locally, npm 6.x.x and node.js v11.x.x versions are required. More information about this problem is available in the #16 .","title":"Set Up the Project Locally"},{"location":"shortcuts/","text":"Keyboard Shortcuts Functionality Context Mac Windows / Linux Polygon autocomplete Editor Enter Enter Cancel polygon drawing Editor Escape Escape Delete currently selected label Editor Backspace Delete Load previous image Editor \u2325 + Left Ctrl + Left Load next image Editor \u2325 + Right Ctrl + Right Zoom in Editor \u2325 + + Ctrl + + Zoom out Editor \u2325 + - Ctrl + - Move image Editor Up / Down / Left / Right Up / Down / Left / Right Select Label Editor \u2325 + 0-9 Ctrl + 0-9 Exit popup Popup Escape Escape","title":"Shortcuts"},{"location":"shortcuts/#keyboard-shortcuts","text":"Functionality Context Mac Windows / Linux Polygon autocomplete Editor Enter Enter Cancel polygon drawing Editor Escape Escape Delete currently selected label Editor Backspace Delete Load previous image Editor \u2325 + Left Ctrl + Left Load next image Editor \u2325 + Right Ctrl + Right Zoom in Editor \u2325 + + Ctrl + + Zoom out Editor \u2325 + - Ctrl + - Move image Editor Up / Down / Left / Right Up / Down / Left / Right Select Label Editor \u2325 + 0-9 Ctrl + 0-9 Exit popup Popup Escape Escape","title":"Keyboard Shortcuts"},{"location":"yolov5/","text":"Convert # clone YOLOv5 repository git clone https://github.com/ultralytics/yolov5.git cd yolov5 # create python virtual environment [recommended] virtualenv venv source venv/bin/activate # install dependencies pip install -r requirements.txt pip install tensorflowjs # convert model to tensorflow.js format python export.py --weights yolov5s.pt --include tfjs","title":"YOLOv5"},{"location":"yolov5/#convert","text":"# clone YOLOv5 repository git clone https://github.com/ultralytics/yolov5.git cd yolov5 # create python virtual environment [recommended] virtualenv venv source venv/bin/activate # install dependencies pip install -r requirements.txt pip install tensorflowjs # convert model to tensorflow.js format python export.py --weights yolov5s.pt --include tfjs","title":"Convert"}]}